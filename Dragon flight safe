import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.net.URL;

class Dragon_Flight extends JPanel {
    private BufferedImage body, leftWing, rightWing;
    private BufferedImage buffer; // Buffer for flicker-free drawing
    private double angle = 0; // Angle for oscillation
    private static final double SCALE = 1.5; // Scale factor for dragon size

    public Dragon_Flight() {
        try {
            body = ImageIO.read(new URL("https://github.com/AdrianKaraulanov26/Music/blob/main/Body.png?raw=true"));
            leftWing = ImageIO.read(new URL("https://github.com/AdrianKaraulanov26/Music/blob/main/LeftWing.png?raw=true"));
            rightWing = ImageIO.read(new URL("https://github.com/AdrianKaraulanov26/Music/blob/main/RightWing.png?raw=true"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Create a timer to update animation
        Timer timer = new Timer(30, e -> {
            angle += 0.1; // Controls speed of wing oscillation
            repaint();
        });
        timer.start();

        setOpaque(false); // Ensure transparency
    }

    @Override
    protected void paintComponent(Graphics g) {
        if (buffer == null || buffer.getWidth() != getWidth() || buffer.getHeight() != getHeight()) {
            buffer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        }

        Graphics2D g2d = buffer.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setComposite(AlphaComposite.Clear);
        g2d.fillRect(0, 0, getWidth(), getHeight()); // Clear buffer
        g2d.setComposite(AlphaComposite.SrcOver);

        int centerX = getWidth() / 2;
        int centerY = getHeight() / 2;

        int wingOffset = (int) (Math.sin(angle) * 9);

        int scaledBodyWidth = (int) (body.getWidth() * SCALE);
        int scaledBodyHeight = (int) (body.getHeight() * SCALE);
        int scaledWingWidth = (int) (leftWing.getWidth() * (SCALE + 0.5));
        int scaledWingHeight = (int) (leftWing.getHeight() * (SCALE + 0.5));

        int leftX = centerX - scaledBodyWidth / 2 - 90;
        int leftY = centerY - scaledWingHeight / 2 + wingOffset - 200;
        g2d.drawImage(leftWing, leftX, leftY, scaledWingWidth, scaledWingHeight, null);

        int rightX = centerX + 25;
        int rightY = centerY - scaledWingHeight / 2 + wingOffset - 200;
        g2d.drawImage(rightWing, rightX, rightY, scaledWingWidth, scaledWingHeight, null);

        g2d.drawImage(body, centerX - scaledBodyWidth / 2, centerY - scaledBodyHeight / 2, scaledBodyWidth, scaledBodyHeight, null);

        g2d.dispose();

        g.drawImage(buffer, 0, 0, null);
    }

    @Override
    public void update(Graphics g) {
        paintComponent(g);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Dragon Flight Animation");
            frame.setSize(1200, 900);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setUndecorated(true); // Removes window border for full visibility
            frame.setBackground(new Color(0, 0, 0, 0)); // Transparent frame background
            frame.setLocationRelativeTo(null);

            // Set transparent content pane
            JPanel contentPane = new JPanel(null);
            contentPane.setOpaque(false);
            frame.setContentPane(contentPane);

            Dragon_Flight animation = new Dragon_Flight();
            animation.setBounds(0, 0, frame.getWidth(), frame.getHeight());
            frame.add(animation);

            frame.setVisible(true);
        });
    }
}
